
name: CI
on: [push]

jobs:
  build-linux:
    if: false # Currently disabled
    name: Build Linux 64-bit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: 'recursive'
          lfs: true
      - run: sudo apt-get update && sudo apt-get install -y nasm libsdl2-dev
      - run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
      - run: cmake --build build --config RelWithDebInfo
      - run: mkdir build-stripped && strip --strip-unneeded -o build-stripped/libOpenTemple.Native.so build/libOpenTemple.Native.so
      - uses: actions/upload-artifact@v2
        with:
          name: native_lib_linux
          path: 'build/libOpenTemple.Native.so'
      - uses: actions/upload-artifact@v2
        with:
          name: native_lib_linux_stripped
          path: 'build-stripped/libOpenTemple.Native.so'

  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64] # [x64, x86] (Disable 32-bit for now)
        # The MSBuild configuration for 32-bit is not called x86, but Win32
        include:
          - arch: x64
            platform: x64
          # - arch: x86
          #   platform: Win32
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
        lfs: true
    - name: Extract ffmpeg dependency
      run: |
        cd thirdparty
        curl -LJO https://github.com/GrognardsFromHell/ffmpeg-bink/releases/download/ffmpeg%2Fbuild%2F11/ffmpeg-win32-static.tar.xz
        tar xfJ ffmpeg-win32-static.tar.xz
      shell: bash
    - name: Build
      run: |
        cmake -B build -A $PLATFORM -DCMAKE_BUILD_TYPE=RelWithDebInfo .
        # Ignore the exit-code of this command since building ffmpeg-bink is a shitshow due to ffmpeg and LTCG
        cmake --build build --config RelWithDebInfo --target ffmpeg-bink || true
        cmake --build build --config RelWithDebInfo -t install
      shell: bash
      env:
        PLATFORM: ${{ matrix.platform }}
    - uses: actions/upload-artifact@v2
      with:
          name: native_lib_windows_${{ matrix.arch }}
          path: build/nuget_files

  build-macosx:
    if: false # Currently disabled
    name: Build MacOSX 64-bit
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: 'recursive'
          lfs: true
      - run: brew install ninja nasm          
      - run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -G Ninja ..
      - run: cmake --build build --config RelWithDebInfo
      - run: mkdir build-stripped && strip -x -o build-stripped/libOpenTemple.Native.dylib build/libOpenTemple.Native.dylib
      - uses: actions/upload-artifact@v2
        with:
          name: native_lib_macos
          path: 'build/libOpenTemple.Native.dylib'
      - uses: actions/upload-artifact@v2
        with:
          name: native_lib_macos_stripped
          path: 'build-stripped/libOpenTemple.Native.dylib'

  build-nuget-package:
    name: Build Managed NuGet Package
    needs: [build-linux, build-windows, build-macosx]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      # Download all the dependents
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: native_lib_linux
      #     path: nuget_files
      - uses: actions/download-artifact@v2
        with:
          name: native_lib_windows_x64
          path: nuget_files
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: native_lib_windows_x86
      #     path: nuget_files
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: native_lib_macos
      #     path: nuget_files
      - name: Generate build number
        id: buildnumber
        uses: einaregilsson/build-number@v2
        with:
          token: ${{ secrets.github_token }}
          prefix: nightly
      - name: Build and Pack
        run: dotnet msbuild -t:Clean,Build,Pack -p:Configuration=Release -p:Platform="Any CPU" -p:NuGetFiles=nuget_files -p:PackageVersionSuffix=${{ steps.buildnumber.outputs.build_number }}
      - uses: actions/upload-artifact@v2
        with:
          name: nuget_package
          path: managed\Interop\bin\Release\*.nupkg

  push_package:
    name: Push NuGet Package
    needs: [build-nuget-package]
    runs-on: windows-latest
    steps:
      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1
      - uses: actions/download-artifact@v2
        with:
          name: nuget_package
      - name: Upload Package
        run: |
          nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/GrognardsFromHell/index.json" -UserName shartte -Password ${{ secrets.GITHUB_TOKEN }}
          nuget push -NonInteractive "*.nupkg" -Source "GitHub"
