
name: CI
on: [push]

jobs:
  build-linux:
    name: Build Linux 64-bit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: 'recursive'
          lfs: true
      - run: sudo apt-get install -y nasm
      - run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
      - run: cmake --build build --config RelWithDebInfo
      - run: mkdir build-stripped && strip --strip-unneeded -o build-stripped/libSpicyTemple.Native.so build/libSpicyTemple.Native.so
      - uses: actions/upload-artifact@master
        with:
          name: native_lib_linux
          path: 'build/libSpicyTemple.Native.so'
      - uses: actions/upload-artifact@master
        with:
          name: native_lib_linux_stripped
          path: 'build-stripped/libSpicyTemple.Native.so'

  build-windows:
    name: Build Windows 64-bit
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: 'recursive'
        lfs: true
    - run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
      shell: bash
    - run: cmake --build build --config RelWithDebInfo
      shell: bash
    - uses: actions/upload-artifact@master
      with:
          name: native_lib_windows
          path: 'build/RelWithDebInfo/SpicyTemple.Native.dll'
    - uses: actions/upload-artifact@master
      with:
          name: native_lib_windows_pdb
          path: 'build/RelWithDebInfo/SpicyTemple.Native.pdb'

  build-macosx:
    name: Build MacOSX 64-bit
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: 'recursive'
          lfs: true
      - run: brew install ninja nasm          
      - run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -G Ninja ..
      - run: cmake --build build --config RelWithDebInfo
      - run: mkdir build-stripped && strip -x -o build-stripped/libSpicyTemple.Native.dylib build/libSpicyTemple.Native.dylib
      - uses: actions/upload-artifact@master
        with:
          name: native_lib_macos
          path: 'build/libSpicyTemple.Native.dylib'
      - uses: actions/upload-artifact@master
        with:
          name: native_lib_macos_stripped
          path: 'build-stripped/libSpicyTemple.Native.dylib'

  build-nuget-package:
    name: Build NuGet Package
    needs: [build-linux, build-windows, build-macosx]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      # Download all the dependents
      - uses: actions/download-artifact@master
        with:
          name: native_lib_linux
      - uses: actions/download-artifact@master
        with:
          name: native_lib_windows
      - uses: actions/download-artifact@master
        with:
          name: native_lib_windows_pdb
      - uses: actions/download-artifact@master
        with:
          name: native_lib_macos
      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1
      - run: |
          nuget pack -NonInteractive
          nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/shartte/index.json" -UserName shartte -Password GH_TOKEN
          nuget push "*.nupkg" -Source "GitHub"
      - uses: actions/upload-artifact@master
        with:
          name: nuget_package
          path: '*.nupkg'

# - job: AggregateBuildArtifacts
#   pool:
#     vmImage: 'vs2017-win2016'
#   dependsOn:
#   - Windows
#   - Mac
#   - Linux
#   steps:
#   - checkout: self
#   - task: DownloadPipelineArtifact@1
#     inputs:
#       downloadPath: $(System.DefaultWorkingDirectory)/build
#   - task: NuGetCommand@2
#     inputs:
#       command: 'pack'
#       packagesToPack: 'SpicyTemple.Native.nuspec'
#       versioningScheme: byPrereleaseNumber
#       majorVersion: '$(Major)'
#       minorVersion: '$(Minor)'
#       patchVersion: '$(Patch)'
#       verbosityPack: 'detailed'
#   - task: GitHubRelease@0
#     inputs:
#       gitHubConnection: shartte
#       action: 'create'
#       target: '$(Build.SourceVersion)'
#       assets: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#       tagSource: 'manual'
#       tag: 'v$(Build.BuildNumber)'
