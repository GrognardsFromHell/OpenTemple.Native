name: CI
on: [push]

env:
  qtRelease: 5.14
  qtVersion: 5.14.2
  qtDownloadUrl: http://download.qt-project.org/official_releases/qt/5.14/5.14.2/submodules/

jobs:

  build-qt:
    name: Build Qt Windows
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
    steps:
      # We try to cache the downloaded Qt versions
      - name: Qt Sources Cache
        id: cache-qt-sources
        uses: actions/cache@v1
        with:
          path: src
          key: qt-${{ env.qtVersion }}-sources

      - name: Downloat Qt Sources
        if: steps.cache-qt-sources.outputs.cache-hit != 'true'
        run: |
          mkdir src && cd src
          mkdir qtbase qtdeclarative qtgraphicaleffects qtimageformats qtlottie qtquickcontrols2 qtsvg
          curl -L -f ${DOWNLOAD_URL}/qtbase-everywhere-src-${VERSION}.tar.xz | tar xJ -C qtbase --strip-components 1
          #curl -L -f ${DOWNLOAD_URL}/qtdeclarative-everywhere-src-${VERSION}.tar.xz | tar xJ -C qtdeclarative --strip-components 1
          #curl -L -f ${DOWNLOAD_URL}/qtgraphicaleffects-everywhere-src-${VERSION}.tar.xz | tar xJ -C qtgraphicaleffects --strip-components 1
          #curl -L -f ${DOWNLOAD_URL}/qtimageformats-everywhere-src-${VERSION}.tar.xz | tar xJ -C qtimageformats --strip-components 1
          #curl -L -f ${DOWNLOAD_URL}/qtlottie-everywhere-src-${VERSION}.tar.xz | tar xJ -C qtlottie --strip-components 1
          #curl -L -f ${DOWNLOAD_URL}/qtquickcontrols2-everywhere-src-${VERSION}.tar.xz | tar xJ -C qtquickcontrols2 --strip-components 1
          #curl -L -f ${DOWNLOAD_URL}/qtsvg-everywhere-src-${VERSION}.tar.xz | tar xJ -C qtsvg --strip-components 1
        shell: bash
        env:
          DOWNLOAD_URL: ${{env.qtDownloadUrl}}
          VERSION: ${{env.qtVersion}}

      - name: Build
        run: |
          @echo on
          IF "%ARCH%"=="x64" (CALL "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat" || goto :error)
          IF "%ARCH%"=="x86" (CALL "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat" || goto :error)

          rem Configure Static QT
          mkdir build\qtbase
          cd build\qtbase
          ..\..\src\qtbase\configure -prefix C:\qt\5.14 -confirm-license -opensource -nomake examples -nomake tests -release ^
            -no-widgets -static -c++std 2a -opengl es2 -angle -schannel -no-sql-odbc -no-sql-sqlite || goto :error
          nmake || goto :error
          goto :EOF

          :error
          echo Failed with error #%errorlevel%.
          exit /b %errorlevel%
        shell: cmd
        env:
          ARCH: ${{ matrix.arch }}

#  build-linux:
#    name: Build Linux 64-bit
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#        with:
#          submodules: 'recursive'
#          lfs: true
#      - run: sudo apt-get update && sudo apt-get install -y nasm libsdl2-dev
#      - run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
#      - run: cmake --build build --config RelWithDebInfo
#      - run: mkdir build-stripped && strip --strip-unneeded -o build-stripped/libOpenTemple.Native.so build/libOpenTemple.Native.so
#      - uses: actions/upload-artifact@master
#        with:
#          name: native_lib_linux
#          path: 'build/libOpenTemple.Native.so'
#      - uses: actions/upload-artifact@master
#        with:
#          name: native_lib_linux_stripped
#          path: 'build-stripped/libOpenTemple.Native.so'
#
#  build-windows:
#    name: Build Windows (${{ matrix.arch }})
#    runs-on: windows-latest
#    strategy:
#      matrix:
#        arch: [x64, x86]
#        # The MSBuild configuration for 32-bit is not called x86, but Win32
#        include:
#          - arch: x64
#            platform: x64
#          - arch: x86
#            platform: Win32
#    steps:
#    - uses: actions/checkout@v1
#      with:
#        submodules: recursive
#        lfs: true
#    - name: Build
#      run: |
#        cmake -B build -A $PLATFORM -DCMAKE_BUILD_TYPE=RelWithDebInfo .
#        cmake --build build --config RelWithDebInfo
#        mkdir dist
#        cp build/RelWithDebInfo/OpenTemple.Native.dll dist
#        cp build/RelWithDebInfo/OpenTemple.Native.pdb dist
#      shell: bash
#      env:
#        PLATFORM: ${{ matrix.platform }}
#    - uses: actions/upload-artifact@master
#      with:
#          name: native_lib_windows_${{ matrix.arch }}
#          path: dist
#
#  build-macosx:
#    name: Build MacOSX 64-bit
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v1
#        with:
#          submodules: 'recursive'
#          lfs: true
#      - run: brew install ninja nasm
#      - run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -G Ninja ..
#      - run: cmake --build build --config RelWithDebInfo
#      - run: mkdir build-stripped && strip -x -o build-stripped/libOpenTemple.Native.dylib build/libOpenTemple.Native.dylib
#      - uses: actions/upload-artifact@master
#        with:
#          name: native_lib_macos
#          path: 'build/libOpenTemple.Native.dylib'
#      - uses: actions/upload-artifact@master
#        with:
#          name: native_lib_macos_stripped
#          path: 'build-stripped/libOpenTemple.Native.dylib'
#
#  build-nuget-package:
#    name: Build NuGet Package
#    needs: [build-linux, build-windows, build-macosx]
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v1
#      # Download all the dependents
#      - uses: actions/download-artifact@master
#        with:
#          name: native_lib_linux
#      - uses: actions/download-artifact@master
#        with:
#          name: native_lib_windows_x64
#      - uses: actions/download-artifact@master
#        with:
#          name: native_lib_windows_x86
#      - uses: actions/download-artifact@master
#        with:
#          name: native_lib_macos
#      - name: Setup Nuget.exe
#        uses: warrenbuckley/Setup-Nuget@v1
#      - name: Generate build number
#        id: buildnumber
#        uses: einaregilsson/build-number@v2
#        with:
#          token: ${{ secrets.github_token }}
#          prefix: nightly
#      - run: |
#          nuget pack -NonInteractive -Suffix ${{ steps.buildnumber.outputs.build_number }}
#          nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/GrognardsFromHell/index.json" -UserName shartte -Password ${{ secrets.GITHUB_TOKEN }}
#          nuget push -NonInteractive "*.nupkg" -Source "GitHub"
